rf.bestmodel.predict.OS<-predict(rf.bestmodel, df.test)
error.df$randomForest[i] <-rmse(actual = df.test$resp,predicted = rf.bestmodel.predict.OS)
rf.resid<-df.train$resp-rf.bestmodel$predicted
resid.rf.OS<-df.test$resp-rf.bestmodel.predict.OS
plot(x=rf.bestmodel.predict.OS,y=df.test$resp,xlab="Y-hat",ylab="Y", main="Y-hat vs. Y")# Y vs. Y-hat
plot(y=df.train$resp, x=rf.bestmodel$predicted, xlab="Fitted Values", ylab="Y", main="Y vs. Fitted values")
plot(y=resid.rf.OS, x=rf.bestmodel.predict.OS, xlab="Fitted Values", ylab="Residuals", main="e vs. Y-hat")
qqnorm(rf.resid)
qqline(rf.resid)
#MARS-------------------------
#First we build an unpruned MARS model
set.seed(4)
form<-as.formula(paste0(names(df.train[1]),"~",paste0(names(df.train[-1]),collapse="+")))
mars.model1<-earth(formula=form,data=df.train,pmethod="none")
rm(form)
summary(mars.model1)
plotmo(mars.model1, bottom_margin = 1)
mars.model1.cv<-crossValidate("kfold",10,df.train,mars.model1,"resp")
#Now, we compare the model with a pruned MARS model
form<-as.formula(paste0(names(df.train[1]),"~",paste0(names(df.train[-1]),collapse="+")))
mars.model2<-earth(formula=form,data=df.train)
rm(form)
summary(mars.model2)
plotmo(mars.model2)
mars.model2.cv<-crossValidate("kfold",10,df.train,mars.model2,"resp")
#Comparing the 2 MARS models
RMSE<-data.frame(mars.model1.cv[1],mars.model2.cv[1])
colnames(RMSE)<-c("MARS_model1_rmse","MARS_model2_rmse")
RMSE
par(mfrow=c(1,1))
boxplot(RMSE, col = c("blue","red"))
legend("bottomright",legend=c("Model1_MARS","Model2_MARS"),col=c("blue","red"),pch=c(19,19), cex = 0.6)
#Since, the pruned MARS model has lower mean rmseOS value and also the standard deviation rmseOS values is lesser.
#Therefore, we select the pruned MARS model.
mars.finalmodel.predict.OS<-predict(mars.model2, df.test)
error.df$MARS[i] <-rmse(actual = df.test$resp,predicted = mars.finalmodel.predict.OS)
mars.resid<-mars.model2$residuals
mars.fitted<-mars.model2$fitted.values
plot(x=mars.finalmodel.predict.OS,y=df.test$resp,xlab="Y-hat",ylab="Y", main="Y-hat vs. Y")# Y vs. Y-hat
plot(y=df.train$resp, x=mars.fitted, xlab="Fitted Values", ylab="Y", main="Y vs. Fitted values")
plot(y=mars.resid, x=mars.fitted, xlab="Fitted Values", ylab="Residuals", main="e vs. Y-hat",xlim = c(0,30000))
qqnorm(mars.resid)
qqline(mars.resid)
#BART-------------------------
# options(java.parameters="-Xmx5g")
# library('bartMachine')
# library('rJava')
# set_bart_machine_num_cores(20)
set.seed(4)
df.train.covariates <- df.train[,-1]
df.train.response <-df.train$resp
bart.df<- bartMachine(X=df.train.covariates,y=df.train.response, serialize = TRUE)
bart.pred.OS <- predict(bart.df,new_data = df.test[,-1])
error.df$bart[i] <-rmse(actual=df.test$resp,predicted = bart.pred.OS)
par(mfrow=c(1,1))
investigate_var_importance(bart.df, num_replicates_for_avg = 20)
plot_y_vs_yhat(bart.df, credible_intervals = TRUE)
# plot_y_vs_yhat(bart.df, prediction_intervals = TRUE)
pd_plot(bart.df,j='DOLLAREL')
pd_plot(bart.df,j='TOTCSQFT')
pd_plot(bart.df,j='TOTHSQFT')
pd_plot(bart.df,j='HDD65')
check_bart_error_assumptions(bart.df, hetero_plot = "yhats")
# var_select_bartcv<-var_selection_by_permute_cv(bart.df, k_folds=10,
#                                                num_reps_for_avg=5,num_trees_for_permute=20, alpha=0.05, num_trees_pred_cv=50)
#
# print(var_select_bartcv$best_method)
# print(var_select_bartcv$important_vars_cv)
#
#SVM-----------------------------
set.seed(4)
form<-as.formula(paste0(names(df.train[1]),"~",paste0(names(df.train[-1]),collapse="+")))
svm.model<-svm(formula=form,data=df.train,cost = 1000, gamma = 0.0001)
rm(form)
summary(svm.model)
svm.model.predict.OS<-predict(svm.model, df.test)
error.df$svm[i] <-rmse(actual=df.test$resp,predicted = svm.model.predict.OS)
svm.resid<-svm.model$residuals
svm.fitted<-svm.model$fitted
plot(x=svm.model.predict.OS,y=df.test$resp,xlab="Y-hat",ylab="Y", main="Y-hat vs. Y")# Y vs. Y-hat
plot(y=df.train$resp, x=svm.fitted, xlab="Fitted Values", ylab="Y", main="Y vs. Fitted values")
plot(y=svm.resid, x=svm.fitted, xlab="Fitted Values", ylab="Residuals", main="e vs. Y-hat",xlim = c(0,30000))
qqnorm(svm.resid)
qqline(svm.resid)
}
View(error.df)
View(error.df)
error.df<-data.frame(mean(error.df$glm[i]),mean(error.df$gam[i]),mean(error.df$tree[i]),
mean(error.df$randomForest[i]),mean(error.df$MARS[i]),mean(error.df$bart[i]),
mean(error.df$svm[i]))
View(error.df)
View(error.df)
gam.diag=data.frame(gam.bestmodel$residuals, gam.bestmodel$fitted.values)
colnames(gam.diag)<-c('resid', 'pred')
plot(x=df.test$resp, y=gam.pred.OS, xlab="Y", ylab="Y-hat", main="Y-hat vs. Y")# Y vs. Y-hat
plot(y=gam.bestmodel$residuals, x=gam.bestmodel$fitted.values, xlab="Fitted Values", ylab="Residuals", main="e vs. Y-hat", xlim = c(0,30000))
qqnorm(gam.bestmodel$residuals)
qqline(gam.bestmodel$residuals)
gam.diag=data.frame(gam.bestmodel$residuals, gam.bestmodel$fitted.values)
colnames(gam.diag)<-c('resid', 'pred')
plot(y=df.test$resp, x=gam.pred.OS, ylab="Y", xlab="Y-hat", main="Y vs. Y-hat")# Y vs. Y-hat
plot(y=gam.bestmodel$residuals, x=gam.bestmodel$fitted.values, xlab="Fitted Values", ylab="Residuals", main="e vs. Y-hat", xlim = c(0,30000))
qqnorm(gam.bestmodel$residuals)
qqline(gam.bestmodel$residuals)
finalmodel<-gam(resp ~ s(TYPEHUQ, d = 4) + s(HDD65, d = 4) + s(TOTCSQFT, d = 4) +s(TOTCSQFT, d = 4)
+ s(DOLLAREL, d = 4) + NUMH2OHTRS + WHEATSIZ2 + ACOTHERS, data = df.train)
finalmodel<-gam(resp ~ s(TYPEHUQ, d = 4) + s(HDD65, d = 4) + s(TOTCSQFT, d = 4) +s(TOTCSQFT, d = 4)
+ s(DOLLAREL, d = 4) + NUMH2OHTRS + WHEATSIZ2 + ACOTHERS, data = df.train)
save.image("~/FINAL/shah398.RData")
load("~/Harmanik/Analysis2.RData")
pd<-pd[c(3:6,10,12:15)]
pd<-names(df.train)
pd<-pd[c(3:6,10,12:15)]
pd
print(i)
for(i in pd){
print(i)
png(file=paste0(i,'_pd.png'), width= 10, height = 10, units = 'in', res = 300)
pd_plot(bart_machine_cv,j=i)
dev.off()
cat('\014')
}
save.image("~/Harmanik/Analysis2.RData")
for(i in pd){
print(i)
png(file=paste0(i,'_pd.png'), width= 10, height = 10, units = 'in', res = 300)
pd_plot(bart_machine_cv,j=i)
dev.off()
cat('\014')
}
bartModel <- bartMachine(X, Y, use_missing_data = TRUE,serialize = T)
.libPaths( c( .libPaths(), "/home/sonin/Rlibs") )
options(java.parameters="-Xmx100g")
library('bartMachine')
library('rJava')
set_bart_machine_num_cores(20)
bartMachine()
for(i in pd){
print(i)
png(file=paste0(i,'_pd.png'), width= 10, height = 10, units = 'in', res = 300)
pd_plot(bart_machine_cv,j=i)
dev.off()
cat('\014')
}
pd
pd
pd<-pd[-8]
pd
pd<-pd['Events_2']
pd
pd<-names(df.train)
pd<-pd[c(3:6,10,12:15)]
pd
pd<-pd[-8]
pd_plot(bart_machine_cv,j='Events_2')
pd_plot(bart_machine_cv,j='Events_2')
pd_plot(bart_machine_cv,j='GC_0')
gam3
save.image("~/Harmanik/Analysis2.RData")
par(mfrow=c(2,2))
colnames(glm.diag)<-c('resid', 'pred')
plot(x=df.test$PM2.5, y=glm.pred, xlab="Y", ylab="Y-hat", main="Y-hat vs. Y")# Y vs. Y-hat
plot(x=df.train$PM2.5, y=glm.pred, xlab="Fitted Values", ylab="Y", main="Y vs. Fitted values")
plot(y=glm3$residuals, x=glm3$fitted.values, xlab="Fitted Values", ylab="Residuals", main="e vs. Y-hat")
qqnorm(glm3$residuals, main="General Linear Model")
qqline(glm3$residuals)
png("GLM_QQ_Resid.png", width = 4, height = 4, units = 'in', res = 300)
dev.off()
par(mfrow=c(2,2))
colnames(glm.diag)<-c('resid', 'pred')
plot(x=df.test$PM2.5, y=glm.pred, xlab="Y", ylab="Y-hat", main="Y-hat vs. Y")# Y vs. Y-hat
plot(x=df.train$PM2.5, y=glm.pred, xlab="Fitted Values", ylab="Y", main="Y vs. Fitted values")
plot(y=glm3$residuals, x=glm3$fitted.values, xlab="Fitted Values", ylab="Residuals", main="e vs. Y-hat")
qqnorm(glm3$residuals, main="General Linear Model")
qqline(glm3$residuals)
qqnorm(glm3$residuals, main="General Linear Model")
qqline(glm3$residuals)
par(mfrow=c(2,2))
colnames(glm.diag)<-c('resid', 'pred')
plot(x=df.test$PM2.5, y=glm.pred, xlab="Y", ylab="Y-hat", main="Y-hat vs. Y")# Y vs. Y-hat
plot(x=df.train$PM2.5, y=glm3$fitted.values, xlab="Fitted Values", ylab="Y", main="Y vs. Fitted values")
plot(y=glm3$residuals, x=glm3$fitted.values, xlab="Fitted Values", ylab="Residuals", main="e vs. Y-hat")
qqnorm(glm3$residuals, main="General Linear Model")
qqline(glm3$residuals)
png("GLM_QQ_Resid.png", width = 4, height = 4, units = 'in', res = 300)
dev.off()
View(glm3)
plot(x=glm3$fitted.values, y=df.train$PM2.5, xlab="Fitted Values", ylab="Y", main="Y vs. Fitted values")
glm3$y
plot(x=glm3$fitted.values, y=-glm3$y, xlab="Fitted Values", ylab="Y", main="Y vs. Fitted values")
par(mfrow=c(2,2))
colnames(glm.diag)<-c('resid', 'pred')
plot(x=glm.pred, y=df.test$PM2.5, xlab="Y-hat", ylab="Y", main="Y-hat vs. Y")# Y vs. Y-hat
plot(x=glm3$fitted.values, y=-glm3$y, xlab="Fitted Values", ylab="Y", main="Y vs. Fitted values")
plot(y=glm3$residuals, x=glm3$fitted.values, xlab="Fitted Values", ylab="Residuals", main="e vs. Y-hat")
qqnorm(glm3$residuals, main="General Linear Model")
qqline(glm3$residuals)
png("GLM_QQ_Resid.png", width = 4, height = 4, units = 'in', res = 300)
dev.off()
par(mfrow=c(2,2))
colnames(glm.diag)<-c('resid', 'pred')
plot(x=glm.pred, y=df.test$PM2.5, xlab="Y-hat", ylab="Y", main="Y-hat vs. Y")# Y vs. Y-hat
plot(x=glm3$fitted.values, y=-glm3$y, xlab="Fitted Values", ylab="Y", main="Y vs. Fitted values")
plot(y=glm3$residuals, x=glm3$fitted.values, xlab="Fitted Values", ylab="Residuals", main="e vs. Y-hat")
qqnorm(glm3$residuals, main="General Linear Model")
qqline(glm3$residuals)
png("GLM_QQ_Resid.png", width = 10, height = 10, units = 'in', res = 300)
dev.off()
png("GLM_QQ_Resid.png", width = 10, height = 10, units = 'in', res = 300)
par(mfrow=c(2,2))
colnames(glm.diag)<-c('resid', 'pred')
plot(x=glm.pred, y=df.test$PM2.5, xlab="Y-hat", ylab="Y", main="Y-hat vs. Y")# Y vs. Y-hat
plot(x=glm3$fitted.values, y=-glm3$y, xlab="Fitted Values", ylab="Y", main="Y vs. Fitted values")
plot(y=glm3$residuals, x=glm3$fitted.values, xlab="Fitted Values", ylab="Residuals", main="e vs. Y-hat")
qqnorm(glm3$residuals, main="General Linear Model")
qqline(glm3$residuals)
dev.off()
par(mfrow=c(2,2))
colnames(glm.diag)<-c('resid', 'pred')
plot(x=glm.pred, y=df.test$PM2.5, xlab="Y-hat", ylab="Y", main="Y-hat vs. Y")# Y vs. Y-hat
plot(x=glm3$fitted.values, y=-glm3$y, xlab="Fitted Values", ylab="Y", main="Y vs. Fitted values")
plot(y=glm3$residuals, x=glm3$fitted.values, xlab="Fitted Values", ylab="Residuals", main="e vs. Y-hat")
qqnorm(glm3$residuals, main="General Linear Model")
qqline(glm3$residuals)
getwd()
png("GLM_QQ_Resid.png", width = 10, height = 10, units = 'in', res = 300)
par(mfrow=c(2,2))
colnames(glm.diag)<-c('resid', 'pred')
plot(x=glm.pred, y=df.test$PM2.5, xlab="Y-hat", ylab="Y", main="Y-hat vs. Y")# Y vs. Y-hat
plot(x=glm3$fitted.values, y=-glm3$y, xlab="Fitted Values", ylab="Y", main="Y vs. Fitted values")
plot(y=glm3$residuals, x=glm3$fitted.values, xlab="Fitted Values", ylab="Residuals", main="e vs. Y-hat")
qqnorm(glm3$residuals, main="General Linear Model")
qqline(glm3$residuals)
dev.off()
resp<-"PM2.5"
wd<-dirname(rstudioapi::getSourceEditorContext()$path)
setwd(wd)
getwd()
png("GLM_QQ_Resid.png", width = 10, height = 10, units = 'in', res = 300)
par(mfrow=c(2,2))
colnames(glm.diag)<-c('resid', 'pred')
plot(x=glm.pred, y=df.test$PM2.5, xlab="Y-hat", ylab="Y", main="Y-hat vs. Y")# Y vs. Y-hat
plot(x=glm3$fitted.values, y=-glm3$y, xlab="Fitted Values", ylab="Y", main="Y vs. Fitted values")
plot(y=glm3$residuals, x=glm3$fitted.values, xlab="Fitted Values", ylab="Residuals", main="e vs. Y-hat")
qqnorm(glm3$residuals, main="General Linear Model")
qqline(glm3$residuals)
dev.off()
colnames(gam.diag)<-c('resid', 'pred')
plot(x=gam.pred, y=df.test$PM2.5, xlab="Y-hat", ylab="Y", main="Y-hat vs. Y")# Y vs. Y-hat
png("GLM_QQ_Resid.png", width = 10, height = 10, units = 'in', res = 300)
par(mfrow=c(2,2))
colnames(glm.diag)<-c('resid', 'pred')
plot(x=glm.pred, y=df.test$PM2.5, xlab="Y-hat", ylab="Y", main="Y-hat vs. Y")# Y vs. Y-hat
plot(x=glm3$fitted.values, y=glm3$y, xlab="Fitted Values", ylab="Y", main="Y vs. Fitted values")
plot(y=glm3$residuals, x=glm3$fitted.values, xlab="Fitted Values", ylab="Residuals", main="e vs. Y-hat")
qqnorm(glm3$residuals, main="General Linear Model")
qqline(glm3$residuals)
dev.off()
plot(x=gam3$fitted.values, y=gam3$y, xlab="Fitted Values", ylab="Y", main="Y vs. Fitted values")
plot(x=gam.pred, y=temp$PM2.5, xlab="Y-hat", ylab="Y", main="Y-hat vs. Y")# Y vs. Y-hat
plot(x=gam.pred, y=df.gam.test$PM2.5, xlab="Y-hat", ylab="Y", main="Y-hat vs. Y")# Y vs. Y-hat
png("GAM_QQ_Resid.png", width = 10, height = 10, units = 'in', res = 300)
par(mfrow=c(2,2))
colnames(gam.diag)<-c('resid', 'pred')
plot(x=gam.pred, y=df.gam.test$PM2.5, xlab="Y-hat", ylab="Y", main="Y-hat vs. Y")# Y vs. Y-hat
plot(x=gam3$fitted.values, y=gam3$y, xlab="Fitted Values", ylab="Y", main="Y vs. Fitted values")
plot(y=gam3$residuals, x=gam3$fitted.values, xlab="Fitted Values", ylab="Residuals", main="e vs. Y-hat")
qqnorm(gam3$residuals, main="General Additive Model")
qqline(gam3$residuals)
dev.off()
plot(x=tree.model1.predict, y=df.test$PM2.5, xlab="Y-hat", ylab="Y", main="Y-hat vs. Y")# Y vs. Y-hat
library(rpart)
plot(x=tree.model1.predict, y=df.test$PM2.5, xlab="Y-hat", ylab="Y", main="Y-hat vs. Y")# Y vs. Y-hat
form<-as.formula(paste0(names(df.train[9]),"~",paste0(names(df.train[-c(1,9)]),collapse="+")))
tree.model1<-rpart(formula=form,data=df.train)
summary(tree.model1)
install.packages('rpart.plot')
library('rpart.plot')
rpart.plot(tree.model1)
tree.model1.cv<-crossValidate("kfold",10,df.train, tree.model1,"PM2.5")
#Pruned CART
plotcp(tree.model1,minline=T,lty=3,col=1,upper=c('size','splits','none'))
tree.model2<-prune(tree.model1, 0.13)
tree.model2.cv<-crossValidate("kfold",10,df.train, tree.model2,"PM2.5")
#Model Comparison
RMSEcompare.cart<-data.frame(tree.model1.cv[1],tree.model2.cv[1])
colnames(RMSEcompare.cart)<-c("CART_model1_rmse","CART_model2_rmse")
RMSEcompare.cart
par(mfrow=c(1,1))
boxplot(RMSEcompare.cart, col = c("blue","red"))
legend("bottomright",legend=c("CART_model1_rmse","CART_model2_rmse"),col=c("blue","red"),pch=c(19,19), cex = 0.6)
#Model1 better so predicting on Model1
tree.model1.predict<-predict(tree.model1, df.test)
tree.model1.rmse<-rmse(tree.model1.predict,df.test$PM2.5)
tree.model1.rmse
library(ModelMetrics)
form<-as.formula(paste0(names(df.train[9]),"~",paste0(names(df.train[-c(1,9)]),collapse="+")))
tree.model1<-rpart(formula=form,data=df.train)
summary(tree.model1)
install.packages('rpart.plot')
library('rpart.plot')
rpart.plot(tree.model1)
tree.model1.cv<-crossValidate("kfold",10,df.train, tree.model1,"PM2.5")
#Pruned CART
plotcp(tree.model1,minline=T,lty=3,col=1,upper=c('size','splits','none'))
tree.model2<-prune(tree.model1, 0.13)
tree.model2.cv<-crossValidate("kfold",10,df.train, tree.model2,"PM2.5")
#Model Comparison
RMSEcompare.cart<-data.frame(tree.model1.cv[1],tree.model2.cv[1])
colnames(RMSEcompare.cart)<-c("CART_model1_rmse","CART_model2_rmse")
RMSEcompare.cart
par(mfrow=c(1,1))
boxplot(RMSEcompare.cart, col = c("blue","red"))
legend("bottomright",legend=c("CART_model1_rmse","CART_model2_rmse"),col=c("blue","red"),pch=c(19,19), cex = 0.6)
#Model1 better so predicting on Model1
tree.model1.predict<-predict(tree.model1, df.test)
tree.model1.rmse<-rmse(tree.model1.predict,df.test$PM2.5)
tree.model1.rmse
install.packages("rpart.plot")
tree.model1.predict<-predict(tree.model1, df.test)
tree.model1.rmse<-rmse(tree.model1.predict,df.test$PM2.5)
tree.model1.rmse
plot(x=tree.model1.predict, y=df.test$PM2.5, xlab="Y-hat", ylab="Y", main="Y-hat vs. Y")# Y vs. Y-hat
plot(x=tree.model1$fitted.values, y=tree.model1$y, xlab="Fitted Values", ylab="Y", main="Y vs. Fitted values")
View(tree.model1)
View(tree.model1)
tree.model1.IS.predict<-predict(tree.model1,df.train)
plot(x=tree.model1.IS.predict, y=tree.model1$y, xlab="Fitted Values", ylab="Y", main="Y vs. Fitted values")
png("CART_QQ_Resid.png", width = 10, height = 10, units = 'in', res = 300)
par(mfrow=c(2,2))
colnames(rpart.diag)<-c('resid', 'pred')
plot(x=tree.model1.predict, y=df.test$PM2.5, xlab="Y-hat", ylab="Y", main="Y vs Y-hat")# Y vs. Y-hat
plot(x=tree.model1.IS.predict, y=tree.model1$y, xlab="Fitted Values", ylab="Y", main="Y vs. Fitted values")
plot(y=tree.model1$residuals, x=tree.model1.IS.predict, xlab="Fitted Values", ylab="Residuals", main="e vs. Y-hat")
qqnorm(tree.model1$residuals, main="General Linear Model")
qqline(tree.model1$residuals)
dev.off()
plot(y=tree.model1$residuals, x=tree.model1.IS.predict, xlab="Fitted Values", ylab="Residuals", main="e vs. Y-hat")
png("CART_QQ_Resid.png", width = 10, height = 10, units = 'in', res = 300)
par(mfrow=c(2,2))
colnames(rpart.diag)<-c('resid', 'pred')
plot(x=tree.model1.predict, y=df.test$PM2.5, xlab="Y-hat", ylab="Y", main="Y vs Y-hat")# Y vs. Y-hat
plot(x=tree.model1.IS.predict, y=tree.model1$y, xlab="Fitted Values", ylab="Y", main="Y vs. Fitted values")
plot(y=tree.model1$residuals, x=tree.model1.IS.predict, xlab="Fitted Values", ylab="Residuals", main="e vs. Y-hat")
qqnorm(tree.model1$residuals, main="CART")
qqline(tree.model1$residuals)
dev.off()
qqnorm(tree.model1$residuals, main="CART")
plot(y=tree.model1$residuals, x=tree.model1.IS.predict, xlab="Fitted Values", ylab="Residuals", main="e vs. Y-hat")
png("CART_QQ_Resid.png", width = 10, height = 10, units = 'in', res = 300)
par(mfrow=c(2,2))
colnames(rpart.diag)<-c('resid', 'pred')
plot(x=tree.model1.predict, y=df.test$PM2.5, xlab="Y-hat", ylab="Y", main="Y vs Y-hat")# Y vs. Y-hat
plot(x=tree.model1.IS.predict, y=tree.model1$y, xlab="Fitted Values", ylab="Y", main="Y vs. Fitted values")
plot(tree.resid, x=tree.model1.predict, xlab="Fitted Values", ylab="Residuals", main="e vs. Y-hat")
qqnorm(tree.resid, main="CART")
qqline(tree.resid)
dev.off()
tree.resid<-df.test$PM2.5-tree.model1.predict
png("CART_QQ_Resid.png", width = 10, height = 10, units = 'in', res = 300)
par(mfrow=c(2,2))
colnames(rpart.diag)<-c('resid', 'pred')
plot(x=tree.model1.predict, y=df.test$PM2.5, xlab="Y-hat", ylab="Y", main="Y vs Y-hat")# Y vs. Y-hat
plot(x=tree.model1.IS.predict, y=tree.model1$y, xlab="Fitted Values", ylab="Y", main="Y vs. Fitted values")
plot(tree.resid, x=tree.model1.predict, xlab="Fitted Values", ylab="Residuals", main="e vs. Y-hat")
qqnorm(tree.resid, main="CART")
qqline(tree.resid)
dev.off()
check_bart_error_assumptions(bart_machine_cv, hetero_plot = "yhats")
options(java.parameters="-Xmx100g")
library('bartMachine')
library('rJava')
set_bart_machine_num_cores(20)
check_bart_error_assumptions(bart_machine_cv, hetero_plot = "yhats")
par(mfrow=c(2,2))
plot_y_vs_yhat(bart_machine_cv, credible_intervals = TRUE)
plot_y_vs_yhat(bart_machine_cv, prediction_intervals = TRUE)
check_bart_error_assumptions(bart_machine_cv, hetero_plot = "yhats")
qqnorm(bart_machine_cv$residuals)
qqline(bart_machine_cv$residuals)
png("BART_QQ_Resid.png", width = 10, height = 10, units = 'in', res = 300)
par(mfrow=c(2,2))
plot_y_vs_yhat(bart_machine_cv, prediction_intervals = TRUE)
check_bart_error_assumptions(bart_machine_cv, hetero_plot = "yhats")
png("BART_QQ_Resid.png", width = 10, height = 10, units = 'in', res = 300)
par(mfrow=c(2,2))
plot_y_vs_yhat(bart_machine_cv, credible_intervals = TRUE)
# check_bart_error_assumptions(bart_machine_cv, hetero_plot = "yhats")
plot(x=bart_machine_cv$residuals, y = bart.pred, xlab="Fitted Values", ylab="Residuals", main="e vs. Y-hat")
qqnorm(bart_machine_cv$residuals)
qqline(bart_machine_cv$residuals)
dev.off()
View(bart_machine_cv)
bart_machine_cv$residuals
plot(x=bart_machine_cv$residuals, y = bart.pred, xlab="Fitted Values", ylab="Residuals", main="e vs. Y-hat")
View(bart.pred)
bart.pred[["y_hat"]]
plot(x=bart_machine_cv$residuals, y = bart.pred$y_hat, xlab="Fitted Values", ylab="Residuals", main="e vs. Y-hat")
plot(x=bart.pred$e, y = bart.pred$y_hat, xlab="Fitted Values", ylab="Residuals", main="e vs. Y-hat")
png("BART_QQ_Resid.png", width = 10, height = 10, units = 'in', res = 300)
par(mfrow=c(2,2))
plot_y_vs_yhat(bart_machine_cv, credible_intervals = TRUE)
# check_bart_error_assumptions(bart_machine_cv, hetero_plot = "yhats")
plot(x=bart.pred$e, y = bart.pred$y_hat, xlab="Fitted Values", ylab="Residuals", main="e vs. Y-hat")
qqnorm(bart_machine_cv$residuals)
qqline(bart_machine_cv$residuals)
dev.off()
View(bart_machine_cv)
bart_machine_cv[["y_hat_train"]]
png("BART_QQ_Resid.png", width = 10, height = 10, units = 'in', res = 300)
par(mfrow=c(2,2))
# plot_y_vs_yhat(bart_machine_cv, credible_intervals = TRUE)
# check_bart_error_assumptions(bart_machine_cv, hetero_plot = "yhats")
plot(x=bart.pred$y_hat , y=ytest, xlab="Y-hat", ylab="Y", main="Y vs Y-hat")# Y vs. Y-hat
plot(x=bart_machine_cv$y_hat_train, y=bart_machine_cv$y, xlab="Fitted Values", ylab="Y", main="Y vs. Fitted values")
plot(x=bart.pred$e, y = bart.pred$y_hat, xlab="Fitted Values", ylab="Residuals", main="e vs. Y-hat")
qqnorm(bart_machine_cv$residuals)
qqline(bart_machine_cv$residuals)
dev.off()
View(mars.model2)
View(mars.model2)
png("MARS_QQ_Resid.png", width = 10, height = 10, units = 'in', res = 300)
par(mfrow=c(2,2))
colnames(rpart.diag)<-c('resid', 'pred')
plot(x=mars.model2.predict, y=df.mars.test$PM2.5, xlab="Y-hat", ylab="Y", main="Y vs Y-hat")# Y vs. Y-hat
plot(x=mars.model2$fitted.values, y=df.mars.train$PM2.5, xlab="Fitted Values", ylab="Y", main="Y vs. Fitted values")
plot(mars.model2$residuals, x=mars.model2.predict, xlab="Fitted Values", ylab="Residuals", main="e vs. Y-hat")
qqnorm(mars.model2$residuals, main="MARS")
qqline(mars.model2$residuals)
dev.off()
plot(mars.model2$residuals, x=mars.model2.predict, xlab="Fitted Values", ylab="Residuals", main="e vs. Y-hat")
colnames(mars.diag)<-c('resid', 'pred')
colnames(earth.diag)<-c('resid', 'pred')
plot(mars.model2$residuals, x=mars.model2$fitted.values, xlab="Fitted Values", ylab="Residuals", main="e vs. Y-hat")
png("MARS_QQ_Resid.png", width = 10, height = 10, units = 'in', res = 300)
par(mfrow=c(2,2))
# colnames(earth.diag)<-c('resid', 'pred')
plot(x=mars.model2.predict, y=df.mars.test$PM2.5, xlab="Y-hat", ylab="Y", main="Y vs Y-hat")# Y vs. Y-hat
plot(x=mars.model2$fitted.values, y=df.mars.train$PM2.5, xlab="Fitted Values", ylab="Y", main="Y vs. Fitted values")
plot(mars.model2$residuals, x=mars.model2$fitted.values, xlab="Fitted Values", ylab="Residuals", main="e vs. Y-hat")
qqnorm(mars.model2$residuals, main="MARS")
qqline(mars.model2$residuals)
dev.off()
View(svm.model1)
png("SVM_QQ_Resid.png", width = 10, height = 10, units = 'in', res = 300)
par(mfrow=c(2,2))
# colnames(earth.diag)<-c('resid', 'pred')
plot(x=svm.model1.predict, y=df.svm.test$PM2.5, xlab="Y-hat", ylab="Y", main="Y vs Y-hat")# Y vs. Y-hat
plot(x=svm.model1$fitted, y=df.svm.train$PM2.5, xlab="Fitted Values", ylab="Y", main="Y vs. Fitted values")
plot(svm.model1$residuals, x=svm.model1$fitted, xlab="Fitted Values", ylab="Residuals", main="e vs. Y-hat")
qqnorm(svm.model1$residuals, main="SVM")
qqline(svm.model1$residuals)
dev.off()
plot(x=svm.model1.predict, y=df.svm.test$PM2.5, xlab="Y-hat", ylab="Y", main="Y vs Y-hat")# Y vs. Y-hat
svm.model1.predict<-predict(svm.model1, df.svm.test)
svm.model1.rmse<-rmse(svm.model1.predict,df.svm.test$PM2.5)
library(e1071)
svm.model1.predict<-predict(svm.model1, df.svm.test)
plot(x=svm.model1.predict, y=df.svm.test$PM2.5, xlab="Y-hat", ylab="Y", main="Y vs Y-hat")# Y vs. Y-hat
svm.model1.predict
df.svm.test$PM2.5
plot(x=svm.model1.predict, y=svm.model1$y.scale, xlab="Y-hat", ylab="Y", main="Y vs Y-hat")# Y vs. Y-hat
df.svm<-df
set.seed(9)
rows<-sample(1:nrow(df.svm),0.80*nrow(df.svm),replace = F)
df.svm.train<-df.svm[rows,]
df.svm.test<-df.svm[-rows,]
rm(rows)
form<-as.formula(paste0(names(df.svm.train[9]),"~",paste0(names(df.svm.train[-c(1,9)]),collapse="+")))
svm.model1<-svm(formula=form,data=df.svm.train, cost = 100, gamma = 0.0001)
rm(form)
summary(svm.model1)
svm.model1.predict<-predict(svm.model1, df.svm.test)
svm.model1.rmse<-rmse(svm.model1.predict,df.svm.test$PM2.5)
svm.cv<-crossValidate('kfold',10,df.svm.train,svm.model1,"PM2.5")
svm.model1.rmse
plot(x=svm.model1.predict, y=df.svm.test$PM2.5, xlab="Y-hat", ylab="Y", main="Y vs Y-hat")# Y vs. Y-hat
svm.model1$fitted
df.svm.train$PM2.5
plot(x=svm.model1$fitted, y=df.svm.train$PM2.5, xlab="Fitted Values", ylab="Y", main="Y vs. Fitted values")
plot(svm.model1$residuals, x=svm.model1$fitted, xlab="Fitted Values", ylab="Residuals", main="e vs. Y-hat")
qqnorm(svm.model1$residuals, main="SVM")
qqline(svm.model1$residuals)
View(df.svm.test)
View(df.svm.test)
png("SVM_QQ_Resid.png", width = 10, height = 10, units = 'in', res = 300)
par(mfrow=c(1,1))
# colnames(earth.diag)<-c('resid', 'pred')
plot(x=svm.model1.predict, y=df.svm.test$PM2.5, xlab="Y-hat", ylab="Y", main="Y vs Y-hat")# Y vs. Y-hat
plot(x=svm.model1$fitted, y=df.svm.train$PM2.5, xlab="Fitted Values", ylab="Y", main="Y vs. Fitted values")
plot(svm.model1$residuals, x=svm.model1$fitted, xlab="Fitted Values", ylab="Residuals", main="e vs. Y-hat")
qqnorm(svm.model1$residuals, main="SVM")
qqline(svm.model1$residuals)
dev.off()
png("SVM_QQ_Resid.png", width = 10, height = 10, units = 'in', res = 300)
par(mfrow=c(1,2))
# colnames(earth.diag)<-c('resid', 'pred')
plot(x=svm.model1.predict, y=df.svm.test$PM2.5, xlab="Y-hat", ylab="Y", main="Y vs Y-hat")# Y vs. Y-hat
plot(x=svm.model1$fitted, y=df.svm.train$PM2.5, xlab="Fitted Values", ylab="Y", main="Y vs. Fitted values")
plot(svm.model1$residuals, x=svm.model1$fitted, xlab="Fitted Values", ylab="Residuals", main="e vs. Y-hat")
qqnorm(svm.model1$residuals, main="SVM")
qqline(svm.model1$residuals)
dev.off()
png("SVM_QQ_Resid.png", width = 10, height = 10, units = 'in', res = 300)
par(mfrow=c(2,1))
# colnames(earth.diag)<-c('resid', 'pred')
plot(x=svm.model1.predict, y=df.svm.test$PM2.5, xlab="Y-hat", ylab="Y", main="Y vs Y-hat")# Y vs. Y-hat
plot(x=svm.model1$fitted, y=df.svm.train$PM2.5, xlab="Fitted Values", ylab="Y", main="Y vs. Fitted values")
plot(svm.model1$residuals, x=svm.model1$fitted, xlab="Fitted Values", ylab="Residuals", main="e vs. Y-hat")
qqnorm(svm.model1$residuals, main="SVM")
qqline(svm.model1$residuals)
dev.off()
